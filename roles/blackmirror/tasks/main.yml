---
- name: update the Apt cache
  apt: update_cache=yes

- name: install latest packages
  apt: pkg={{ item }} state=latest
  with_items:
    - git
    - nginx
    - curl

- name: get the up to date Git repository
  become: no
  git: repo=https://{{ project }}.git
       accept_hostkey=yes
       dest={{ go_path }}/src/{{ project }}

- name: create an init script
  template: src=init.j2 dest=/etc/init/{{ name }}.conf mode=0755
  notify: check init syntax

# TODO Use the git module instead of command
- name: register the git project version
  become: no
  command: git describe --tags chdir="{{ go_path }}/src/{{ project }}"
  ignore_errors: yes
  register: project_version
  changed_when: false

- name: register the version
  become: no
  command: "{{ go_bin }}/{{ name }} --version"
  ignore_errors: yes
  register: version
  changed_when: false

- name: install
  become: no
  shell: GOPATH={{ go_path }} GOBIN={{ go_bin }} /usr/local/go/bin/go install -ldflags "-X main.version=`git describe --tags`" {{ name }}.go chdir="{{ go_path }}/src/{{ project }}"
  when: go_version|failed or go_version.stdout != go_version_target or version|failed or version.stdout != "{{ name }} version {{ project_version.stdout }}"
  notify: restart service

- name: create a nginx site available
  template: src=nginx.j2 dest=/etc/nginx/sites-available/{{ name }}.nginx

- name: remove the default nginx site
  file: dest=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx

- name: symlink the nginx site available to enabled
  file: src=/etc/nginx/sites-available/{{ name }}.nginx dest=/etc/nginx/sites-enabled/{{ name }}.nginx state=link
  notify: restart nginx
