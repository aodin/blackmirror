---
- hosts: all
  remote_user: ubuntu
  become: yes
  vars:
    name: "blackmirror"
    project: "github.com/aodin/{{ name }}"
    port: 8080
    go_path: "/home/ubuntu/go" # TODO sudo -E? better ENV handling?
    go_bin: "{{ go_path }}/bin"
    go_target: "1.6.2"
    go_tarball: "go{{ go_target }}.linux-amd64.tar.gz"
    go_version_target: "go version go{{ go_target }} linux/amd64"
  tasks:
  - name: update the Apt cache
    apt: update_cache=yes

  - name: install latest packages
    apt: pkg={{ item }} state=latest
    with_items:
      - git
      - nginx
      - curl

  - name: download the Go tarball
    get_url: url="https://storage.googleapis.com/golang/{{ go_tarball }}"
             dest="/usr/local/src/{{ go_tarball }}"

  - name: register the current Go version
    become: no
    command: /usr/local/go/bin/go version
    ignore_errors: yes
    register: go_version
    changed_when: false

  - name: delete the Go directory when Go is not the registered version
    file: path=/usr/local/go
          state=absent
    ignore_errors: yes
    when: go_version|failed or go_version.stdout != go_version_target

  - name: extract the Go tarball when Go is not the registered version
    unarchive: src=/usr/local/src/{{ go_tarball }}
               dest=/usr/local
               copy=no
    when: go_version|failed or go_version.stdout != go_version_target

  - name: set the GOPATH
    copy: content="export GOPATH=$HOME/go; export PATH=$PATH:/usr/local/go/bin"
          mode=0755
          dest=/etc/profile.d/gopath.sh

  - name: set GOBIN
    copy: content="export GOBIN={{ go_bin }}; export PATH=$PATH:$GOBIN"
          mode=0755
          dest=/etc/profile.d/gobin.sh

  - name: get the up to date Git repository
    become: no
    git: repo=https://{{ project }}.git
         accept_hostkey=yes
         dest={{ go_path }}/src/{{ project }}

  - name: create an init script
    template: src=init.tpl dest=/etc/init/{{ name }}.conf mode=0755
    notify: check init syntax

  # TODO Use the git module instead of command
  - name: register the git project version
    become: no
    command: git describe --tags chdir="{{ go_path }}/src/{{ project }}"
    ignore_errors: yes
    register: project_version
    changed_when: false

  - name: register the version
    become: no
    command: "{{ go_bin }}/{{ name }} --version"
    ignore_errors: yes
    register: version
    changed_when: false

  - name: install
    become: no
    shell: GOPATH={{ go_path }} GOBIN={{ go_bin }} /usr/local/go/bin/go install -ldflags "-X main.version=`git describe --tags`" {{ name }}.go chdir="{{ go_path }}/src/{{ project }}"
    when: go_version|failed or go_version.stdout != go_version_target or version|failed or version.stdout != "{{ name }} version {{ project_version.stdout }}"
    notify: restart service

  - name: create a nginx site available
    template: src=nginx.tpl dest=/etc/nginx/sites-available/{{ name }}.nginx

  - name: remove the default nginx site
    file: dest=/etc/nginx/sites-enabled/default state=absent
    notify: restart nginx

  - name: symlink the nginx site available to enabled
    file: src=/etc/nginx/sites-available/{{ name }}.nginx dest=/etc/nginx/sites-enabled/{{ name }}.nginx state=link
    notify: restart nginx

  handlers:
  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart service
    service: name={{ name }} state=restarted

  - name: reload init
    command: initctl reload-configuration
    notify: restart service

  - name: check init syntax
    become: no
    command: init-checkconf /etc/init/{{ name }}.conf
    notify: reload init
